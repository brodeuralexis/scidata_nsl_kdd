# NSL-KDD

## Dependencies

```elixir
Mix.install([
  {:csv, "~> 2.4"}
])
```

## Data Set

```elixir
defmodule NSLKDD do
  @protocol_types %{
    "tcp" => 1,
    "udp" => 2,
    "icmp" => 3
  }

  @services %{
    "private" => 1,
    "ftp_data" => 2,
    "eco_i" => 3,
    "telnet" => 4,
    "http" => 5,
    "smtp" => 6,
    "ftp" => 7,
    "ldap" => 8,
    "pop_3" => 9,
    "courier" => 10,
    "discard" => 11,
    "ecr_i" => 12,
    "imap4" => 13,
    "domain_u" => 14,
    "mtp" => 15,
    "systat" => 16,
    "iso_tsap" => 17,
    "other" => 18,
    "csnet_ns" => 19,
    "finger" => 20,
    "uucp" => 21,
    "whois" => 22,
    "netbios_ns" => 23,
    "link" => 24,
    "Z39_50" => 25,
    "sunrpc" => 26,
    "auth" => 27,
    "netbios_dgm" => 28,
    "uucp_path" => 29,
    "vmnet" => 30,
    "domain" => 31,
    "name" => 32,
    "pop_2" => 33,
    "http_443" => 34,
    "urp_i" => 35,
    "login" => 36,
    "gopher" => 37,
    "exec" => 38,
    "time" => 39,
    "remote_job" => 40,
    "ssh" => 41,
    "kshell" => 42,
    "sql_net" => 43,
    "shell" => 44,
    "hostnames" => 45,
    "echo" => 46,
    "daytime" => 47,
    "pm_dump" => 48,
    "IRC" => 49,
    "netstat" => 50,
    "ctf" => 51,
    "nntp" => 52,
    "netbios_ssn" => 53,
    "tim_i" => 54,
    "supdup" => 55,
    "bgp" => 56,
    "nnsp" => 57,
    "rje" => 58,
    "printer" => 59,
    "efs" => 60,
    "X11" => 61,
    "ntp_u" => 62,
    "klogin" => 63,
    "tftp_u" => 64,
    "red_i" => 65,
    "urh_i" => 66,
    "http_8001" => 67,
    "aol" => 68,
    "http_2784" => 69,
    "harvest" => 70
  }

  @flags %{
    "REJ" => 1,
    "SF" => 2,
    "RSTO" => 3,
    "S0" => 4,
    "RSTR" => 5,
    "SH" => 6,
    "S3" => 7,
    "S2" => 8,
    "S1" => 9,
    "RSTOS0" => 10,
    "OTH" => 11
  }

  @classes %{
    "normal" => 1,
    "neptune" => 2,
    "warezclient" => 3,
    "ipsweep" => 4,
    "portsweep" => 5,
    "teardrop" => 6,
    "nmap" => 7,
    "satan" => 8,
    "smurf" => 9,
    "pod" => 10,
    "back" => 11,
    "guess_passwd" => 12,
    "ftp_write" => 13,
    "multihop" => 14,
    "rootkit" => 15,
    "buffer_overflow" => 16,
    "imap" => 17,
    "warezmaster" => 18,
    "phf" => 19,
    "land" => 20,
    "loadmodule" => 21,
    "spy" => 22,
    "perl" => 23,
    "saint" => 24,
    "mscan" => 25,
    "apache2" => 26,
    "snmpgetattack" => 27,
    "processtable" => 28,
    "httptunnel" => 29,
    "ps" => 30,
    "snmpguess" => 31,
    "mailbomb" => 32,
    "named" => 33,
    "sendmail" => 34,
    "xterm" => 35,
    "worm" => 36,
    "xlock" => 37,
    "xsnoop" => 38,
    "sqlattack" => 39,
    "udpstorm" => 40
  }

  def open do
    options = [
      :memory,
      {:file_list,
       [
         to_charlist(train_file_name()),
         to_charlist(test_file_name())
       ]}
    ]

    {:ok, files} = :zip.unzip(to_charlist(dataset_path()), options)

    {_, train_binary} = List.keyfind!(files, to_charlist(train_file_name()), 0)
    {_, test_binary} = List.keyfind!(files, to_charlist(test_file_name()), 0)

    for {key, value} <- %{train: train_binary, test: test_binary}, into: %{} do
      {datum, labels} =
        value
        |> String.trim()
        |> String.split("\n")
        |> Stream.map(&String.trim/1)
        |> CSV.decode!(headers: false)
        |> Stream.map(&transform/1)
        |> Enum.unzip()

      {key,
       {
         datum,
         labels
       }}
    end
  end

  defp transform([
         duration,
         protocol_type,
         service,
         flag,
         src_bytes,
         dst_bytes,
         land,
         wrong_fragment,
         urgent,
         hot,
         num_failed_logins,
         logged_in,
         num_compromised,
         root_shell,
         su_attempted,
         num_root,
         num_file_creations,
         num_shells,
         num_access_files,
         num_outbound_cmds,
         hot_login?,
         guest_login?,
         count,
         srv_count,
         serror_rate,
         srv_serror_rate,
         rerror_rate,
         srv_rerror_rate,
         same_srv_rate,
         diff_srv_rate,
         srv_diff_host_rate,
         dst_host_count,
         dst_host_srv_count,
         dst_host_same_srv_rate,
         dst_host_diff_srv_rate,
         dst_host_same_src_port_rate,
         dst_host_srv_diff_host_rate,
         dst_host_serror_rate,
         dst_host_srv_serror_rate,
         dst_host_rerror_rate,
         dst_host_srv_rerror_rate,
         class,
         difficulty_level
       ]) do
    {
      <<
        String.to_integer(duration)::float-little,
        Map.fetch!(@protocol_types, protocol_type)::float-little,
        Map.fetch!(@services, service)::float-little,
        Map.fetch!(@flags, flag)::float-little,
        String.to_integer(src_bytes)::float-little,
        String.to_integer(dst_bytes)::float-little,
        String.to_integer(land)::float-little,
        String.to_integer(wrong_fragment)::float-little,
        String.to_integer(urgent)::float-little,
        String.to_integer(hot)::float-little,
        String.to_integer(num_failed_logins)::float-little,
        String.to_integer(logged_in)::float-little,
        String.to_integer(num_compromised)::float-little,
        String.to_integer(root_shell)::float-little,
        String.to_integer(su_attempted)::float-little,
        String.to_integer(num_root)::float-little,
        String.to_integer(num_file_creations)::float-little,
        String.to_integer(num_shells)::float-little,
        String.to_integer(num_access_files)::float-little,
        String.to_integer(num_outbound_cmds)::float-little,
        String.to_integer(hot_login?)::float-little,
        String.to_integer(guest_login?)::float-little,
        String.to_integer(count)::float-little,
        String.to_integer(srv_count)::float-little,
        String.to_float(serror_rate)::float-little,
        String.to_float(srv_serror_rate)::float-little,
        String.to_float(rerror_rate)::float-little,
        String.to_float(srv_rerror_rate)::float-little,
        String.to_float(same_srv_rate)::float-little,
        String.to_float(diff_srv_rate)::float-little,
        String.to_float(srv_diff_host_rate)::float-little,
        String.to_integer(dst_host_count)::float-little,
        String.to_integer(dst_host_srv_count)::float-little,
        String.to_float(dst_host_same_srv_rate)::float-little,
        String.to_float(dst_host_diff_srv_rate)::float-little,
        String.to_float(dst_host_same_src_port_rate)::float-little,
        String.to_float(dst_host_srv_diff_host_rate)::float-little,
        String.to_float(dst_host_serror_rate)::float-little,
        String.to_float(dst_host_srv_serror_rate)::float-little,
        String.to_float(dst_host_rerror_rate)::float-little,
        String.to_float(dst_host_srv_rerror_rate)::float-little
      >>,
      <<
        Map.fetch!(@classes, class)::float-little,
        String.to_integer(difficulty_level)::float-little
      >>
    }
  end

  def n_features do
    41
  end

  def n_labels do
    2
  end

  defp dataset_path do
    "#{__DIR__}/NSL-KDD.zip"
  end

  defp train_file_name do
    "KDDTrain+.txt"
  end

  defp test_file_name do
    "KDDTest+.txt"
  end
end

dataset = :ok
```

```elixir
%{train: {train_features, train_labels}, test: {test_features, test_labels}} = NSLKDD.open()

write_features = fn features_file, features ->
  IO.inspect(length(features), label: "length(features)")

  datum = [
    <<length(features)::32, NSLKDD.n_features()::32>>,
    features
  ]

  File.write!("#{__DIR__}/#{features_file}", datum, [:compressed])
end

write_labels = fn labels_file, labels ->
  IO.inspect(length(labels), label: "length(labels)")

  datum = [
    <<length(labels)::32, NSLKDD.n_labels()::32>>,
    labels
  ]

  File.write!("#{__DIR__}/#{labels_file}", datum, [:compressed])
end

write_features.("NSL-KDD-Train-Features.gz", train_features)
write_labels.("NSL-KDD-Train-Labels.gz", train_labels)
write_features.("NSL-KDD-Test-Features.gz", test_features)
write_labels.("NSL-KDD-Test-Labels.gz", test_labels)
```
